############################################################# Patrón Prototype #############################################################
package Modelo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

// Clase abstracta para definir el prototipo de operación (Patrón Prototype)
public abstract class ConexionStoredProcedure implements Cloneable {

    // Variable protegida para la conexión a la base de datos
    protected Connection conexion;

    // Constructor que recibe la conexión a la base de datos
    public ConexionStoredProcedure() {
        // Se obtiene la conexión desde el Singleton
        this.conexion = ConexionSQLServer.getInstancia().getConexion();
    }

    // Método abstracto que cada subclase deberá implementar para ejecutar la operación específica
    public abstract void ejecutar() throws SQLException;

    // Método para clonar el prototipo
    @Override
    public ConexionStoredProcedure clone() {
        try {
            return (ConexionStoredProcedure) super.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }
}

############################################################# Patrón Singleton #############################################################
package Modelo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConexionSQLServer {
    
    // Variable estática para almacenar la única instancia de la clase.
    private static ConexionSQLServer instancia;
    
    // Variable para la conexión con la base de datos.
    private Connection conexion;
    
    // Datos de conexión a la base de datos.
    private final String url = "jdbc:sqlserver://localhost:1433;database=ProyectoDP_FoodChain;encrypt=false";
    private final String usuario = "sa";
    private final String contrasena = "012345";

       
    // Constructor privado para evitar instanciación externa (Patrón Singleton).
    private ConexionSQLServer() {
        try {
            // Establecemos la conexión.
            conexion = DriverManager.getConnection(url, usuario, contrasena);
            System.out.println("Conexión exitosa a la base de datos SQL Server.");
        } catch (SQLException e) {
            // Capturamos y mostramos cualquier error en la conexión.
            System.out.println("Error en la conexión: " + e.getMessage());
        }
    }
    
    // Método estático que devuelve la única instancia de la clase (Patrón Singleton).
    public static ConexionSQLServer getInstancia() {
        if (instancia == null) {
            // Si la instancia no existe, la creamos.
            instancia = new ConexionSQLServer();
        }
        // Retornamos la instancia única.
        return instancia;
    }
    
    // Método para obtener la conexión y usarla en otros componentes (Vista o Controlador).
    public Connection getConexion() {
        return conexion;
    }  
}

############################################################# Patrón Factory #############################################################
package Controlador;

import java.sql.SQLException;

// Interfaz para procedimientos almacenados
public interface IStoredProcedure {
    void ejecutar() throws SQLException;
}
------------------------------------------------------------------------------------------------------------------------------------------
package Controlador;

import Modelo.ConexionStoredProcedure;
import java.sql.PreparedStatement;
import java.sql.SQLException;

// Clase para manejar el procedimiento almacenado InsertarUsuario
public class InsertarUsuarioProcedure extends ConexionStoredProcedure implements IStoredProcedure {

    private String nombre;
    private String tipoUsuario;
    private String email;
    private String telefono;
    private String direccion;

    public InsertarUsuarioProcedure(String nombre, String tipoUsuario, String email, String telefono, String direccion) {
        this.nombre = nombre;
        this.tipoUsuario = tipoUsuario;
        this.email = email;
        this.telefono = telefono;
        this.direccion = direccion;
    }

    @Override
    public void ejecutar() throws SQLException {
        String sql = "EXEC InsertarUsuario ?, ?, ?, ?, ?";
        PreparedStatement statement = conexion.prepareStatement(sql);
        statement.setString(1, nombre);
        statement.setString(2, tipoUsuario);
        statement.setString(3, email);
        statement.setString(4, telefono);
        statement.setString(5, direccion);

        // Ejecuta el procedimiento almacenado
        statement.executeUpdate();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
package Controlador;
// Factory para crear instancias de los procedimientos almacenados
public class StoredProcedureFactory {

    public IStoredProcedure crearProcedimiento(String tipo, Object... params) {
        switch (tipo) {
            case "InsertarUsuario":
                return new InsertarUsuarioProcedure(
                    (String) params[0], // nombre
                    (String) params[1], // tipoUsuario
                    (String) params[2], // email
                    (String) params[3], // telefono
                    (String) params[4]  // direccion
                );
            // Aquí puedes agregar más casos para otros procedimientos almacenados
            // Ejemplo: case "InsertarExcedente":
            //          return new InsertarExcedenteProcedure(...);
            default:
                throw new IllegalArgumentException("Tipo de procedimiento no reconocido: " + tipo);
        }
    }
}
